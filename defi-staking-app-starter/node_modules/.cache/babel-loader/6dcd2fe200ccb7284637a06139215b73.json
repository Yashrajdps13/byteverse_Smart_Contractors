{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     async  loadWeb3() {\n//     if(window.ethereum) {\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//         await window.ethereum.enable()\n//     } else if(window.web3) {\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//     }else {\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//     }\n// }\n// // loading web3 in our react-app\n//     async  loadBlockchainData() {\n//         const web3 = window.web3;\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//         console.log(\"here is my account\"+account);\n//         const networkId = await web3.eth.net.getId();// to get the networkId\n//         //load randomContractName  contract to your app\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//     }\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//           //  tether: {},//creating empty objects for storing the object\n//         }\n//     }\n//     render() {\n//     return (\n//         <>\n//         <h1 className='text-center'>Jai mata di</h1>\n//             </>  \n//     )\n//     }\n// }\n// export default App;\n//testing part---\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//                 await this.loadWeb3();\n//                 await this.loadBlockchainData();\n//             }\n//             async  loadWeb3() {\n//             if(window.ethereum) {\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//                 await window.ethereum.enable()\n//             } else if(window.web3) {\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//             }else {\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//             }\n//         }\n//         // loading web3 in our react-app\n//             async  loadBlockchainData() {\n//                 const web3 = window.web3;\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//                 console.log(\"here is my account\"+account);\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\n//                // to get the networkId\n//                 console.log(`network id is ${networkId}`);\n//                 //load Voting  contract to your app\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//                 // console.log(votingData.address);\n//                 if(votingData) {\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\n//                     //  console.log(votingData.address);\n//                     this.setState({voting: voting});\n//                     let counter = await voting.methods.counter().call();\n//                     this.setState({counter: counter.toString() })\n//                     console.log({counter: counter})\n//                     // let person = await voting.methods.person.call();\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\n//                 }\n//                 else{\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\n//                 }\n//                 this.setState({loading: false});\n//              }\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//         constructor(props) {\n//                 super(props);\n//                 this.state = {\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//                    voting: {},//creating empty objects for storing the object\n//                    counter:'0',\n//                    person: 'false',\n//                    loading: true\n//                 }\n//             }\n//             render() {\n//              let content;\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\n//                 <p><button  >count:  </button></p>\n//                 <p> {this.props.counter}</p>\n//                 <p>\n//                 <button>{this.props.person} person</button>\n//                 </p>\n//             </div>}\n//             return (\n//                 <>\n//                 <div className='container-fluid mt-6'> \n//                 <div className='row'>\n//                     {content}\n//                      </div>\n//                 </div>\n//                     </>  \n//             )\n//             }\n//         }\n//         export default App;\n// import Voting from \"../truffle_abis/voting.json\"\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n// import \"./App.css\";\n// function App() {\n//   const [contract, setContract] = useState(null);\n//   const [person, setPerson] = useState(false);\n//   const [counter, setCounter] = useState(0);\n//   // Load the contract on component mount\n//   useEffect(() => {\n//     const loadTheApp = async () => {\n//       // Connect to Ethereum network\n//       if (window.ethereum) {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         // Load the network\n//         const networkId = await web3.eth.net.getId();\n//         const contractAddress=  Voting.networks[networkId].address;\n//         const contractABI = Voting.abi;\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\n//         setContract(votingContract);\n//       }\n//     };\n//     loadTheApp();\n//   }, []);\n//   // Handle the voting button click\n//   const handleVoteClick = async () => {\n//     try {\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress });\n//       // Update the state\n//       const newCounter = await contract.methods.counter().call();\n//       setCounter(parseInt(newCounter));\n//       if (newCounter === \"10\") {\n//         setPerson(true);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       <h1>Smart Contract Voting</h1>\n//       <p>Counter: {counter}</p>\n//       {person ? (\n//         <p>The person has voted 10 times.</p>\n//       ) : (\n//         <button onClick={handleVoteClick}>Vote</button>\n//       )}\n//     </div>\n//   );\n// }\n// export default App;\n//      const contractAddress=  Voting.networks[5777].address;\n// const contractABI = Voting.abi;\n// try 14-04-23\n// import React, {Component, useState} from 'react';\n// import ReactDOM from 'react-dom';\n// import './App.css'\n// import Web3 from 'web3';                                                                                                                                                       \n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// export default function App() {\n//         var votingContract;\n//         var userAccount;\n//         var [votingContract, setVotingContract] = useState(undefined);\n//         var [account, setAccount] = useState(undefined);\n//         var [counting, setCounting] = useState(0);\n//         var [reaction, setReaction] = useState(undefined);\n//         var [person, setPersonStatus] = useState(undefined);\n//         async function startApp(){\n//                     if(window.ethereum){\n//                        window.web3 = new Web3(window.ethereum);\n//                        await window.ethereum.enable();     \n//                     } else if(window.web3) {\n//                          window.web3 = new Web3(window.web3.currentProvider)\n//                     }else {\n//                         console.log(\"No ethereum browser detected: You can check out MetaMask\")\n//                     }                \n//                 }\n//                 async function loadingBlockchainData() {\n//                     await startApp();\n//                     const web3= window.web3;\n//                     userAccount = await web3.eth.getAccounts();// this is to get the connected account on the browser from the MetaMask\n//                     setAccount(userAccount);\n//                    const networkId = await web3.eth.net.getId();\n//                    const votingData = Voting.networks[networkId];\n//                    //now loading our smart conntract\n//                    if(votingData){\n//                        var contractAddress= votingData.address;\n//                        var voting = new web3.eth.Contract( Voting.abi, contractAddress );\n//                        setVotingContract(voting);\n//                    }\n//                    else{\n//                     console.log(\"your votingData is not loaded yet!!\")\n//                    }\n//                 }\n//                 // var permission\n//                 // async function permToVote() {\n//                 //     permission= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\n//                 //     .on('receipt', function (reciept){\n//                 //             setReaction(`user have successfully voted`);\n//                 //     }).on('error', function(error) {\n//                 //         setReaction(`user vote isn't updated by the following error=> ${error}`)\n//                 //     })\n//                 // } \n//                        var counted;\n//                 async function counter() {\n//                     counted= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\n//                     .on('receipt', function (reciept){\n//                             setReaction(`user have successfully voted`);\n//                     }).on('error', function(error) {\n//                         setReaction(`user vote isn't updated by the following error=> ${error}`)\n//                     })\n//                 } \n//                 var counting;\n//                async function countingStatus() {\n//                 counting= await votingContract.methods.counter().call();\n//                 setCounting(counting);\n//                }\n//                var personn;\n//                async function personStatus() {\n//                 personn = await votingContract.methods.n().call();\n//                 setPersonStatus(personn)\n//                }\n//         return(\n//             <div id='container'>\n//             <h1>hello world</h1>\n//             <h2>now get the right to vote by clicking the button below</h2>\n//             <button onClick={loadingBlockchainData()}>vote</button>\n//             <h2>counter</h2>\n//             <button onClick={counter()}>counter</button>\n//             <p id='txtStatus'> {reaction}</p>\n//             <button onClick={countingStatus()}>Counting status</button>\n//             <p id='countingStatusOnSite'> {counting}</p>\n//             <button onClick={personStatus()}>person status</button>\n//             <p id='personStatusOnSite'> {person}</p>\n//             </div>\n//         )\n//  }\n// import Voting from \"../truffle_abis/voting.json\"\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n// import \"./App.css\";\n// function App() {\n//     const [address, setAddress] = useState('0x0');\n//   const [contract, setContract] = useState(null);\n//   const [person, setPerson] = useState(false);\n//   const [counter, setCounter] = useState(0);\n//   // Load the contract on component mount\n//   useEffect(() => {\n//     const loadTheApp = async () => {\n//       // Connect to Ethereum network\n//       if (window.ethereum) {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         // Load the network\n//         const networkId = await web3.eth.net.getId();\n//         console.log(`the networkId is => ${networkId}`)\n//         const contractAddress=  Voting.networks[networkId].address;\n//         setAddress(contractAddress);\n//         const contractABI = Voting.abi;\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\n//         setContract(votingContract);\n//       }\n//     };  \n//     loadTheApp();\n//   }, []);\n//   // Handle the voting button click\n//   const handleVoteClick = async () => {\n//     try {\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress, gas: 3000000 });\n//       // Update the state\n//       const newCounter = await contract.methods.counter().call();\n//       setCounter(parseInt(newCounter));\n//     //   console.log(`counter is => `+counter)\n//       if (newCounter === \"13\") {\n//         setPerson(true);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <h1>Smart Contract Voting</h1>\n//       <p>Counter: {counter}</p>\n//       {person ? (\n//         <p>The person has voted 10 times.</p>\n//       ) : (\n//         <button onClick={handleVoteClick}>Vote</button>\n//       )}\n//     </div>\n//     </>\n//   );\n// }\n// export default App;\n/// improved voting \nimport Voting from \"../truffle_abis/voting.json\";\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\"; //start: 15:03\n\nfunction App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      contract = _useState2[0],\n      setContract = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countA = _useState4[0],\n      setCountA = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      countB = _useState6[0],\n      setCountB = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      countC = _useState8[0],\n      setCountC = _useState8[1];\n\n  var _useState9 = useState('result will be declared soon'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      result = _useState10[0],\n      setResult = _useState10[1];\n\n  useEffect(function () {\n    var loadTheApp = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, account, networkId, contractAddress, contractABI, votingContract;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 3;\n                return window.ethereum.enable();\n\n              case 3:\n                web3 = new Web3(window.ethereum); ///getting the account\n\n                _context.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                account = _context.sent;\n                console.log(\"user account is == \".concat(account));\n                console.log(\"user account is == \".concat(window.ethereum.selectedAddress)); // Load the network\n\n                _context.next = 11;\n                return web3.eth.net.getId();\n\n              case 11:\n                networkId = _context.sent;\n                contractAddress = Voting.networks[networkId].address; // fetching the system from thi abis\n\n                console.log(web3.eth.accounts[0]);\n                console.log(contractAddress);\n                contractABI = Voting.abi;\n                votingContract = new web3.eth.Contract(contractABI, contractAddress);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadTheApp() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadTheApp();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }, \"creating an improved version of the voting in India\"));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":["Voting","React","useState","useEffect","Web3","App","contract","setContract","countA","setCountA","countB","setCountB","countC","setCountC","result","setResult","loadTheApp","window","ethereum","enable","web3","eth","getAccounts","account","console","log","selectedAddress","net","getId","networkId","contractAddress","networks","address","accounts","contractABI","abi","votingContract","Contract"],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA,OAAOA,MAAP,MAAmB,6BAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP,C,CACA;;AACA,SAASC,GAAT,GAAe;AAAA,kBAEmBH,QAAQ,CAAC,IAAD,CAF3B;AAAA;AAAA,MAENI,QAFM;AAAA,MAEIC,WAFJ;;AAAA,mBAGeL,QAAQ,CAAC,CAAD,CAHvB;AAAA;AAAA,MAGNM,MAHM;AAAA,MAGEC,SAHF;;AAAA,mBAIeP,QAAQ,CAAC,CAAD,CAJvB;AAAA;AAAA,MAINQ,MAJM;AAAA,MAIEC,SAJF;;AAAA,mBAKeT,QAAQ,CAAC,CAAD,CALvB;AAAA;AAAA,MAKNU,MALM;AAAA,MAKEC,SALF;;AAAA,mBAMeX,QAAQ,CAAC,8BAAD,CANvB;AAAA;AAAA,MAMNY,MANM;AAAA,MAMEC,SANF;;AAUbZ,EAAAA,SAAS,CAAC,YAAM;AACV,QAAMa,UAAU;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEbC,MAAM,CAACC,QAFM;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGTD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAHS;;AAAA;AAITC,gBAAAA,IAJS,GAIF,IAAIhB,IAAJ,CAASa,MAAM,CAACC,QAAhB,CAJE,EAMf;;AANe;AAAA,uBAQGE,IAAI,CAACC,GAAL,CAASC,WAAT,EARH;;AAAA;AAQbC,gBAAAA,OARa;AASfC,gBAAAA,OAAO,CAACC,GAAR,8BAAkCF,OAAlC;AACAC,gBAAAA,OAAO,CAACC,GAAR,8BAAkCR,MAAM,CAACC,QAAP,CAAgBQ,eAAlD,GAVe,CAYf;;AAZe;AAAA,uBAaSN,IAAI,CAACC,GAAL,CAASM,GAAT,CAAaC,KAAb,EAbT;;AAAA;AAaTC,gBAAAA,SAbS;AAcTC,gBAAAA,eAdS,GAcS9B,MAAM,CAAC+B,QAAP,CAAgBF,SAAhB,EAA2BG,OAdpC,EAc4C;;AAC3DR,gBAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACC,GAAL,CAASY,QAAT,CAAkB,CAAlB,CAAZ;AACAT,gBAAAA,OAAO,CAACC,GAAR,CAAYK,eAAZ;AACMI,gBAAAA,WAjBS,GAiBKlC,MAAM,CAACmC,GAjBZ;AAkBTC,gBAAAA,cAlBS,GAkBQ,IAAIhB,IAAI,CAACC,GAAL,CAASgB,QAAb,CAAsBH,WAAtB,EAAmCJ,eAAnC,CAlBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVd,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAuBAA,IAAAA,UAAU;AACX,GAzBI,EAyBF,EAzBE,CAAT;AA2BA,sBACI,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADA,CADJ;AAMC;;AACD,eAAeX,GAAf","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\n// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//                 await this.loadWeb3();\r\n//                 await this.loadBlockchainData();\r\n//             }\r\n        \r\n//             async  loadWeb3() {\r\n//             if(window.ethereum) {\r\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//                 await window.ethereum.enable()\r\n//             } else if(window.web3) {\r\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//             }else {\r\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//             }\r\n//         }\r\n//         // loading web3 in our react-app\r\n        \r\n//             async  loadBlockchainData() {\r\n//                 const web3 = window.web3;\r\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//                 console.log(\"here is my account\"+account);\r\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\r\n//                // to get the networkId\r\n//                 console.log(`network id is ${networkId}`);\r\n        \r\n//                 //load Voting  contract to your app\r\n             \r\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n//                 // console.log(votingData.address);\r\n//                 if(votingData) {\r\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\r\n                    \r\n//                     //  console.log(votingData.address);\r\n//                     this.setState({voting: voting});\r\n//                     let counter = await voting.methods.counter().call();\r\n//                     this.setState({counter: counter.toString() })\r\n//                     console.log({counter: counter})\r\n//                     // let person = await voting.methods.person.call();\r\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\r\n                    \r\n                    \r\n//                 }\r\n//                 else{\r\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\r\n//                 }\r\n\r\n\r\n//                 this.setState({loading: false});\r\n//              }\r\n      \r\n         \r\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//         constructor(props) {\r\n//                 super(props);\r\n//                 this.state = {\r\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//                    voting: {},//creating empty objects for storing the object\r\n//                    counter:'0',\r\n//                    person: 'false',\r\n//                    loading: true\r\n//                 }\r\n//             }\r\n        \r\n//             render() {\r\n                \r\n//              let content;\r\n                \r\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\r\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\r\n//                 <p><button  >count:  </button></p>\r\n//                 <p> {this.props.counter}</p>\r\n//                 <p>\r\n//                 <button>{this.props.person} person</button>\r\n//                 </p>\r\n                \r\n\r\n//             </div>}\r\n//             return (\r\n//                 <>\r\n//                 <div className='container-fluid mt-6'> \r\n//                 <div className='row'>\r\n//                     {content}\r\n//                      </div>\r\n//                 </div>\r\n//                     </>  \r\n//             )\r\n//             }\r\n//         }\r\n        \r\n//         export default App;\r\n        \r\n// import Voting from \"../truffle_abis/voting.json\"\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Web3 from \"web3\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   const [contract, setContract] = useState(null);\r\n//   const [person, setPerson] = useState(false);\r\n//   const [counter, setCounter] = useState(0);\r\n\r\n//   // Load the contract on component mount\r\n//   useEffect(() => {\r\n//     const loadTheApp = async () => {\r\n//       // Connect to Ethereum network\r\n//       if (window.ethereum) {\r\n//         await window.ethereum.enable();\r\n//         const web3 = new Web3(window.ethereum);\r\n\r\n//         // Load the network\r\n//         const networkId = await web3.eth.net.getId();\r\n//         const contractAddress=  Voting.networks[networkId].address;\r\n//         const contractABI = Voting.abi;\r\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//         setContract(votingContract);\r\n//       }\r\n//     };\r\n\r\n//     loadTheApp();\r\n//   }, []);\r\n\r\n//   // Handle the voting button click\r\n//   const handleVoteClick = async () => {\r\n//     try {\r\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress });\r\n\r\n//       // Update the state\r\n//       const newCounter = await contract.methods.counter().call();\r\n//       setCounter(parseInt(newCounter));\r\n\r\n//       if (newCounter === \"10\") {\r\n//         setPerson(true);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Smart Contract Voting</h1>\r\n//       <p>Counter: {counter}</p>\r\n//       {person ? (\r\n//         <p>The person has voted 10 times.</p>\r\n//       ) : (\r\n//         <button onClick={handleVoteClick}>Vote</button>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n//      const contractAddress=  Voting.networks[5777].address;\r\n// const contractABI = Voting.abi;\r\n         \r\n\r\n// try 14-04-23\r\n\r\n// import React, {Component, useState} from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './App.css'\r\n// import Web3 from 'web3';                                                                                                                                                       \r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// export default function App() {\r\n//         var votingContract;\r\n//         var userAccount;\r\n       \r\n//         var [votingContract, setVotingContract] = useState(undefined);\r\n//         var [account, setAccount] = useState(undefined);\r\n//         var [counting, setCounting] = useState(0);\r\n//         var [reaction, setReaction] = useState(undefined);\r\n//         var [person, setPersonStatus] = useState(undefined);\r\n\r\n\r\n\r\n\r\n//         async function startApp(){\r\n//                     if(window.ethereum){\r\n//                        window.web3 = new Web3(window.ethereum);\r\n//                        await window.ethereum.enable();     \r\n//                     } else if(window.web3) {\r\n//                          window.web3 = new Web3(window.web3.currentProvider)\r\n//                     }else {\r\n//                         console.log(\"No ethereum browser detected: You can check out MetaMask\")\r\n//                     }                \r\n//                 }\r\n//                 async function loadingBlockchainData() {\r\n//                     await startApp();\r\n//                     const web3= window.web3;\r\n//                     userAccount = await web3.eth.getAccounts();// this is to get the connected account on the browser from the MetaMask\r\n//                     setAccount(userAccount);\r\n//                    const networkId = await web3.eth.net.getId();\r\n//                    const votingData = Voting.networks[networkId];\r\n                   \r\n//                    //now loading our smart conntract\r\n//                    if(votingData){\r\n//                        var contractAddress= votingData.address;\r\n\r\n//                        var voting = new web3.eth.Contract( Voting.abi, contractAddress );\r\n//                        setVotingContract(voting);\r\n//                    }\r\n//                    else{\r\n//                     console.log(\"your votingData is not loaded yet!!\")\r\n//                    }\r\n//                 }\r\n//                 // var permission\r\n//                 // async function permToVote() {\r\n//                 //     permission= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n//                 //     .on('receipt', function (reciept){\r\n//                 //             setReaction(`user have successfully voted`);\r\n//                 //     }).on('error', function(error) {\r\n//                 //         setReaction(`user vote isn't updated by the following error=> ${error}`)\r\n//                 //     })\r\n//                 // } \r\n\r\n//                        var counted;\r\n//                 async function counter() {\r\n//                     counted= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n//                     .on('receipt', function (reciept){\r\n//                             setReaction(`user have successfully voted`);\r\n//                     }).on('error', function(error) {\r\n//                         setReaction(`user vote isn't updated by the following error=> ${error}`)\r\n//                     })\r\n//                 } \r\n//                 var counting;\r\n//                async function countingStatus() {\r\n//                 counting= await votingContract.methods.counter().call();\r\n//                 setCounting(counting);\r\n//                }\r\n                 \r\n//                var personn;\r\n//                async function personStatus() {\r\n//                 personn = await votingContract.methods.n().call();\r\n//                 setPersonStatus(personn)\r\n//                }\r\n    \r\n//         return(\r\n//             <div id='container'>\r\n//             <h1>hello world</h1>\r\n//             <h2>now get the right to vote by clicking the button below</h2>\r\n//             <button onClick={loadingBlockchainData()}>vote</button>\r\n//             <h2>counter</h2>\r\n//             <button onClick={counter()}>counter</button>\r\n//             <p id='txtStatus'> {reaction}</p>\r\n//             <button onClick={countingStatus()}>Counting status</button>\r\n//             <p id='countingStatusOnSite'> {counting}</p>\r\n//             <button onClick={personStatus()}>person status</button>\r\n//             <p id='personStatusOnSite'> {person}</p>\r\n//             </div>\r\n//         )\r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n// import Voting from \"../truffle_abis/voting.json\"\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Web3 from \"web3\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//     const [address, setAddress] = useState('0x0');\r\n//   const [contract, setContract] = useState(null);\r\n//   const [person, setPerson] = useState(false);\r\n//   const [counter, setCounter] = useState(0);\r\n\r\n//   // Load the contract on component mount\r\n//   useEffect(() => {\r\n//     const loadTheApp = async () => {\r\n//       // Connect to Ethereum network\r\n//       if (window.ethereum) {\r\n//         await window.ethereum.enable();\r\n//         const web3 = new Web3(window.ethereum);\r\n\r\n//         // Load the network\r\n//         const networkId = await web3.eth.net.getId();\r\n//         console.log(`the networkId is => ${networkId}`)\r\n//         const contractAddress=  Voting.networks[networkId].address;\r\n//         setAddress(contractAddress);\r\n//         const contractABI = Voting.abi;\r\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//         setContract(votingContract);\r\n        \r\n//       }\r\n//     };  \r\n\r\n//     loadTheApp();\r\n//   }, []);\r\n  \r\n\r\n//   // Handle the voting button click\r\n//   const handleVoteClick = async () => {\r\n//     try {\r\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress, gas: 3000000 });\r\n\r\n//       // Update the state\r\n//       const newCounter = await contract.methods.counter().call();\r\n//       setCounter(parseInt(newCounter));\r\n//     //   console.log(`counter is => `+counter)\r\n\r\n//       if (newCounter === \"13\") {\r\n//         setPerson(true);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n\r\n\r\n//     <div className=\"App\">\r\n//       <h1>Smart Contract Voting</h1>\r\n//       <p>Counter: {counter}</p>\r\n//       {person ? (\r\n//         <p>The person has voted 10 times.</p>\r\n//       ) : (\r\n//         <button onClick={handleVoteClick}>Vote</button>\r\n//       )}\r\n//     </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n/// improved voting \r\n\r\nimport Voting from \"../truffle_abis/voting.json\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\n//start: 15:03\r\nfunction App() {\r\n\r\n  const [contract, setContract] = useState(null);\r\n  const [countA, setCountA] = useState(0);\r\n  const [countB, setCountB] = useState(0);\r\n  const [countC, setCountC] = useState(0);\r\n  const [result, setResult] = useState('result will be declared soon');\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n        const loadTheApp = async () => {\r\n          // Connect to Ethereum network\r\n          if (window.ethereum) {\r\n            await window.ethereum.enable();\r\n            const web3 = new Web3(window.ethereum);\r\n\r\n            ///getting the account\r\n             \r\n        const account = await web3.eth.getAccounts();\r\n            console.log(`user account is == ${account}`)\r\n            console.log(`user account is == ${window.ethereum.selectedAddress}`)\r\n    \r\n            // Load the network\r\n            const networkId = await web3.eth.net.getId();\r\n            const contractAddress=  Voting.networks[networkId].address;// fetching the system from thi abis\r\n            console.log(web3.eth.accounts[0]);\r\n            console.log(contractAddress)\r\n            const contractABI = Voting.abi;\r\n            const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n    \r\n          }\r\n        };  \r\n    \r\n        loadTheApp();\r\n      }, []);\r\n\r\n  return(\r\n      <>\r\n      <div>creating an improved version of the voting in India</div>\r\n      </>\r\n\r\n  )\r\n  }\r\n  export default App;"]},"metadata":{},"sourceType":"module"}