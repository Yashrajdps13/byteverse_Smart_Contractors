{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     async  loadWeb3() {\n//     if(window.ethereum) {\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//         await window.ethereum.enable()\n//     } else if(window.web3) {\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//     }else {\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//     }\n// }\n// // loading web3 in our react-app\n//     async  loadBlockchainData() {\n//         const web3 = window.web3;\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//         console.log(\"here is my account\"+account);\n//         const networkId = await web3.eth.net.getId();// to get the networkId\n//         //load randomContractName  contract to your app\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//     }\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//           //  tether: {},//creating empty objects for storing the object\n//         }\n//     }\n//     render() {\n//     return (\n//         <>\n//         <h1 className='text-center'>Jai mata di</h1>\n//             </>  \n//     )\n//     }\n// }\n// export default App;\n//testing part---\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//                 await this.loadWeb3();\n//                 await this.loadBlockchainData();\n//             }\n//             async  loadWeb3() {\n//             if(window.ethereum) {\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//                 await window.ethereum.enable()\n//             } else if(window.web3) {\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//             }else {\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//             }\n//         }\n//         // loading web3 in our react-app\n//             async  loadBlockchainData() {\n//                 const web3 = window.web3;\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//                 console.log(\"here is my account\"+account);\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\n//                // to get the networkId\n//                 console.log(`network id is ${networkId}`);\n//                 //load Voting  contract to your app\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//                 // console.log(votingData.address);\n//                 if(votingData) {\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\n//                     //  console.log(votingData.address);\n//                     this.setState({voting: voting});\n//                     let counter = await voting.methods.counter().call();\n//                     this.setState({counter: counter.toString() })\n//                     console.log({counter: counter})\n//                     // let person = await voting.methods.person.call();\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\n//                 }\n//                 else{\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\n//                 }\n//                 this.setState({loading: false});\n//              }\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//         constructor(props) {\n//                 super(props);\n//                 this.state = {\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//                    voting: {},//creating empty objects for storing the object\n//                    counter:'0',\n//                    person: 'false',\n//                    loading: true\n//                 }\n//             }\n//             render() {\n//              let content;\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\n//                 <p><button  >count:  </button></p>\n//                 <p> {this.props.counter}</p>\n//                 <p>\n//                 <button>{this.props.person} person</button>\n//                 </p>\n//             </div>}\n//             return (\n//                 <>\n//                 <div className='container-fluid mt-6'> \n//                 <div className='row'>\n//                     {content}\n//                      </div>\n//                 </div>\n//                     </>  \n//             )\n//             }\n//         }\n//         export default App;\n// import Voting from \"../truffle_abis/voting.json\"\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n// import \"./App.css\";\n// function App() {\n//   const [contract, setContract] = useState(null);\n//   const [person, setPerson] = useState(false);\n//   const [counter, setCounter] = useState(0);\n//   // Load the contract on component mount\n//   useEffect(() => {\n//     const loadTheApp = async () => {\n//       // Connect to Ethereum network\n//       if (window.ethereum) {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         // Load the network\n//         const networkId = await web3.eth.net.getId();\n//         const contractAddress=  Voting.networks[networkId].address;\n//         const contractABI = Voting.abi;\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\n//         setContract(votingContract);\n//       }\n//     };\n//     loadTheApp();\n//   }, []);\n//   // Handle the voting button click\n//   const handleVoteClick = async () => {\n//     try {\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress });\n//       // Update the state\n//       const newCounter = await contract.methods.counter().call();\n//       setCounter(parseInt(newCounter));\n//       if (newCounter === \"10\") {\n//         setPerson(true);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       <h1>Smart Contract Voting</h1>\n//       <p>Counter: {counter}</p>\n//       {person ? (\n//         <p>The person has voted 10 times.</p>\n//       ) : (\n//         <button onClick={handleVoteClick}>Vote</button>\n//       )}\n//     </div>\n//   );\n// }\n// export default App;\n//      const contractAddress=  Voting.networks[5777].address;\n// const contractABI = Voting.abi;\n// try 14-04-23\n// import React, {Component, useState} from 'react';\n// import ReactDOM from 'react-dom';\n// import './App.css'\n// import Web3 from 'web3';                                                                                                                                                       \n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// export default function App() {\n//         var votingContract;\n//         var userAccount;\n//         var [votingContract, setVotingContract] = useState(undefined);\n//         var [account, setAccount] = useState(undefined);\n//         var [counting, setCounting] = useState(0);\n//         var [reaction, setReaction] = useState(undefined);\n//         var [person, setPersonStatus] = useState(undefined);\n//         async function startApp(){\n//                     if(window.ethereum){\n//                        window.web3 = new Web3(window.ethereum);\n//                        await window.ethereum.enable();     \n//                     } else if(window.web3) {\n//                          window.web3 = new Web3(window.web3.currentProvider)\n//                     }else {\n//                         console.log(\"No ethereum browser detected: You can check out MetaMask\")\n//                     }                \n//                 }\n//                 async function loadingBlockchainData() {\n//                     await startApp();\n//                     const web3= window.web3;\n//                     userAccount = await web3.eth.getAccounts();// this is to get the connected account on the browser from the MetaMask\n//                     setAccount(userAccount);\n//                    const networkId = await web3.eth.net.getId();\n//                    const votingData = Voting.networks[networkId];\n//                    //now loading our smart conntract\n//                    if(votingData){\n//                        var contractAddress= votingData.address;\n//                        var voting = new web3.eth.Contract( Voting.abi, contractAddress );\n//                        setVotingContract(voting);\n//                    }\n//                    else{\n//                     console.log(\"your votingData is not loaded yet!!\")\n//                    }\n//                 }\n//                 // var permission\n//                 // async function permToVote() {\n//                 //     permission= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\n//                 //     .on('receipt', function (reciept){\n//                 //             setReaction(`user have successfully voted`);\n//                 //     }).on('error', function(error) {\n//                 //         setReaction(`user vote isn't updated by the following error=> ${error}`)\n//                 //     })\n//                 // } \n//                        var counted;\n//                 async function counter() {\n//                     counted= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\n//                     .on('receipt', function (reciept){\n//                             setReaction(`user have successfully voted`);\n//                     }).on('error', function(error) {\n//                         setReaction(`user vote isn't updated by the following error=> ${error}`)\n//                     })\n//                 } \n//                 var counting;\n//                async function countingStatus() {\n//                 counting= await votingContract.methods.counter().call();\n//                 setCounting(counting);\n//                }\n//                var personn;\n//                async function personStatus() {\n//                 personn = await votingContract.methods.n().call();\n//                 setPersonStatus(personn)\n//                }\n//         return(\n//             <div id='container'>\n//             <h1>hello world</h1>\n//             <h2>now get the right to vote by clicking the button below</h2>\n//             <button onClick={loadingBlockchainData()}>vote</button>\n//             <h2>counter</h2>\n//             <button onClick={counter()}>counter</button>\n//             <p id='txtStatus'> {reaction}</p>\n//             <button onClick={countingStatus()}>Counting status</button>\n//             <p id='countingStatusOnSite'> {counting}</p>\n//             <button onClick={personStatus()}>person status</button>\n//             <p id='personStatusOnSite'> {person}</p>\n//             </div>\n//         )\n//  }\n// import Voting from \"../truffle_abis/voting.json\"\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n// import \"./App.css\";\n// function App() {\n//     const [address, setAddress] = useState('0x0');\n//   const [contract, setContract] = useState(null);\n//   const [person, setPerson] = useState(false);\n//   const [counter, setCounter] = useState(0);\n//   // Load the contract on component mount\n//   useEffect(() => {\n//     const loadTheApp = async () => {\n//       // Connect to Ethereum network\n//       if (window.ethereum) {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         // Load the network\n//         const networkId = await web3.eth.net.getId();\n//         console.log(`the networkId is => ${networkId}`)\n//         const contractAddress=  Voting.networks[networkId].address;\n//         setAddress(contractAddress);\n//         const contractABI = Voting.abi;\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\n//         setContract(votingContract);\n//       }\n//     };  \n//     loadTheApp();\n//   }, []);\n//   // Handle the voting button click\n//   const handleVoteClick = async () => {\n//     try {\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress, gas: 3000000 });\n//       // Update the state\n//       const newCounter = await contract.methods.counter().call();\n//       setCounter(parseInt(newCounter));\n//     //   console.log(`counter is => `+counter)\n//       if (newCounter === \"13\") {\n//         setPerson(true);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <h1>Smart Contract Voting</h1>\n//       <p>Counter: {counter}</p>\n//       {person ? (\n//         <p>The person has voted 10 times.</p>\n//       ) : (\n//         <button onClick={handleVoteClick}>Vote</button>\n//       )}\n//     </div>\n//     </>\n//   );\n// }\n// export default App;\n/// improved voting \nimport Voting from \"../truffle_abis/voting.json\";\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\"; //start: 15:03\n\nfunction App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      contract = _useState2[0],\n      setContract = _useState2[1];\n\n  var _useState3 = useState('0'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countA = _useState4[0],\n      setCountA = _useState4[1];\n\n  var _useState5 = useState('0'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      countB = _useState6[0],\n      setCountB = _useState6[1];\n\n  var _useState7 = useState('0'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      countC = _useState8[0],\n      setCountC = _useState8[1];\n\n  var _useState9 = useState('result will be declared soon'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      result = _useState10[0],\n      setResult = _useState10[1];\n\n  var _useState11 = useState('account will be updated soon'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      account = _useState12[0],\n      setAccount = _useState12[1];\n\n  useEffect(function () {\n    var loadTheApp = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, _account, networkId, contractAddress, contractABI, votingContract;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 3;\n                return window.ethereum.enable();\n\n              case 3:\n                web3 = new Web3(window.ethereum); ///getting the account\n\n                _context.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                _account = _context.sent;\n                setAccount(_account[0]); // Load the network\n\n                _context.next = 10;\n                return web3.eth.net.getId();\n\n              case 10:\n                networkId = _context.sent;\n                contractAddress = Voting.networks[networkId].address.toString(); // fetching the system from thi abis\n\n                console.log(typeof contractAddress);\n                console.log(web3.eth.accounts[0]);\n                console.log(contractAddress);\n                contractABI = Voting.abi;\n                console.log(\"contractAbi is= \" + contractABI);\n                votingContract = new web3.eth.Contract(contractABI, contractAddress);\n                setContract(votingContract);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadTheApp() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadTheApp();\n  }, []);\n  console.log(\"contract is => \".concat(contract));\n  var votea;\n\n  function votingOfA() {\n    return _votingOfA.apply(this, arguments);\n  }\n\n  function _votingOfA() {\n    _votingOfA = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(contract !== null)) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 3;\n              return contract.methods.voteA().send({\n                from: account\n              }).on(\"receipt\", function (receipt) {\n                var voteStatusForA = document.getElementById('voteStatusForA');\n                voteStatusForA.innerHTML = \"voting for part A has been done\";\n                statusOfA();\n              }).on(\"error\", function (error) {\n                var voteStatusForA = document.getElementById('voteStatusForA');\n                voteStatusForA.innerHTML = \"Something went wrong while voting\";\n              });\n\n            case 3:\n              votea = _context2.sent;\n              _context2.next = 7;\n              break;\n\n            case 6:\n              setTimeout(function () {\n                votingOfA();\n              }, 100);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _votingOfA.apply(this, arguments);\n  }\n\n  var voteb;\n\n  function votingOfB() {\n    return _votingOfB.apply(this, arguments);\n  }\n\n  function _votingOfB() {\n    _votingOfB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(contract !== null)) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 3;\n              return contract.methods.voteB().send({\n                from: account\n              }).on(\"receipt\", function (receipt) {\n                var voteStatusForB = document.getElementById('voteStatusForB');\n                voteStatusForB.innerHTML = \"voting for part B has been done\";\n                statusOfB();\n              }).on(\"error\", function (error) {\n                var voteStatusForB = document.getElementById('voteStatusForB');\n                voteStatusForB.innerHTML = \"Something went wrong while voting\";\n              });\n\n            case 3:\n              voteb = _context3.sent;\n              _context3.next = 7;\n              break;\n\n            case 6:\n              setTimeout(function () {\n                votingOfB();\n              }, 100);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _votingOfB.apply(this, arguments);\n  }\n\n  var votec;\n\n  function votingOfC() {\n    return _votingOfC.apply(this, arguments);\n  }\n\n  function _votingOfC() {\n    _votingOfC = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(contract !== null)) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 3;\n              return contract.methods.voteB().send({\n                from: account\n              }).on(\"receipt\", function (receipt) {\n                var voteStatusForC = document.getElementById('voteStatusForC');\n                voteStatusForC.innerHTML = \"voting for part C has been done\";\n                statusOfC();\n              }).on(\"error\", function (error) {\n                console.log(\"error from voting of c = \".concat(error));\n                var voteStatusForC = document.getElementById('voteStatusForC');\n                voteStatusForC.innerHTML = \"Something went wrong while voting\";\n                ;\n              });\n\n            case 3:\n              votec = _context4.sent;\n              _context4.next = 7;\n              break;\n\n            case 6:\n              setTimeout(function () {\n                votingOfC();\n              }, 100);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _votingOfC.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    console.log(result);\n    var resultsOfVoting = document.getElementById('resultsOfVoting');\n    resultsOfVoting.innerHTML = result;\n  }, [result]);\n  var r;\n\n  function resultDeclaration() {\n    return _resultDeclaration.apply(this, arguments);\n  }\n\n  function _resultDeclaration() {\n    _resultDeclaration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return contract.methods.winner().call();\n\n            case 2:\n              r = _context5.sent;\n              setResult(r);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _resultDeclaration.apply(this, arguments);\n  }\n\n  function endOfVoting() {\n    return _endOfVoting.apply(this, arguments);\n  }\n\n  function _endOfVoting() {\n    _endOfVoting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var buttonForA, buttonForB, buttonForC;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              buttonForA = document.getElementById('buttonForA');\n              buttonForA.setAttribute(\"disabled\", true);\n              buttonForB = document.getElementById('buttonForB');\n              buttonForB.setAttribute(\"disabled\", true);\n              buttonForC = document.getElementById('buttonForC');\n              buttonForC.setAttribute(\"disabled\", true);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _endOfVoting.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    console.log(countA);\n    var statusForA = document.getElementById('statusForA');\n    statusForA.innerHTML = countA;\n  }, [countA]);\n  var vak;\n\n  function statusOfA() {\n    return _statusOfA.apply(this, arguments);\n  }\n\n  function _statusOfA() {\n    _statusOfA = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return contract.methods.a().call();\n\n            case 2:\n              vak = _context7.sent;\n              console.log('a is called' + vak);\n              console.log(\"type of vak = \".concat(typeof vak));\n              setCountA(vak.toString());\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _statusOfA.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    console.log(countB);\n    var statusForB = document.getElementById('statusForB');\n    statusForB.innerHTML = countB;\n  }, [countB]);\n  var ky;\n\n  function statusOfB() {\n    return _statusOfB.apply(this, arguments);\n  }\n\n  function _statusOfB() {\n    _statusOfB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return contract.methods.b().call();\n\n            case 2:\n              ky = _context8.sent;\n              console.log('b is called' + vak);\n              console.log(\"type of ky = \".concat(typeof ky));\n              setCountB(ky.toString());\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _statusOfB.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    console.log(countC);\n    var statusForC = document.getElementById('statusForC');\n    statusForC.innerHTML = countB;\n  }, [countC]);\n  var koi;\n\n  function statusOfB() {\n    return _statusOfB2.apply(this, arguments);\n  }\n\n  function _statusOfB2() {\n    _statusOfB2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return contract.methods.c().call();\n\n            case 2:\n              koi = _context9.sent;\n              console.log('b is called' + vak);\n              console.log(\"type of ky = \".concat(typeof ky));\n              setCountB(ky.toString());\n\n            case 6:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _statusOfB2.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 7\n    }\n  }, \"creating an improved version of the voting in India\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"voteContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"votingBallot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"votingSectionOfA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 9\n    }\n  }, \"A\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"statusForA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !contract,\n    id: \"buttonForA\",\n    className: \"votingButtons\",\n    onClick: function onClick() {\n      votingOfA();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 9\n    }\n  }, \"Vote\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"voteStatusForA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"votingBallot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"votingSectionOfB\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }\n  }, \"B\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"statusForB\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !contract,\n    id: \"buttonForB\",\n    className: \"votingButtons\",\n    onClick: function onClick() {\n      votingOfB();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }\n  }, \"Vote\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"voteStatusForB\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"votingBallot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"votingSectionOfC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 9\n    }\n  }, \"C\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"statusForC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !contract,\n    id: \"buttonForC\",\n    className: \"votingButtons\",\n    onClick: function onClick() {\n      votingOfC();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }\n  }, \"Vote\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"voteStatusForC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"endVoting\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      endOfVoting();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 28\n    }\n  }, \"End Voting\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      resultDeclaration();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 25\n    }\n  }, \"Show Results\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"boxContainingResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"resultsOfVoting\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 37\n    }\n  })));\n}\n\nexport default App; // problem\n//1. why I the innerHTML is not working \n//2. and findout the new error of metaMask","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":["Voting","React","useState","useEffect","Web3","App","contract","setContract","countA","setCountA","countB","setCountB","countC","setCountC","result","setResult","account","setAccount","loadTheApp","window","ethereum","enable","web3","eth","getAccounts","net","getId","networkId","contractAddress","networks","address","toString","console","log","accounts","contractABI","abi","votingContract","Contract","votea","votingOfA","methods","voteA","send","from","on","receipt","voteStatusForA","document","getElementById","innerHTML","statusOfA","error","setTimeout","voteb","votingOfB","voteB","voteStatusForB","statusOfB","votec","votingOfC","voteStatusForC","statusOfC","resultsOfVoting","r","resultDeclaration","winner","call","endOfVoting","buttonForA","setAttribute","buttonForB","buttonForC","statusForA","vak","a","statusForB","ky","b","statusForC","koi","c"],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\n// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//                 await this.loadWeb3();\r\n//                 await this.loadBlockchainData();\r\n//             }\r\n        \r\n//             async  loadWeb3() {\r\n//             if(window.ethereum) {\r\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//                 await window.ethereum.enable()\r\n//             } else if(window.web3) {\r\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//             }else {\r\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//             }\r\n//         }\r\n//         // loading web3 in our react-app\r\n        \r\n//             async  loadBlockchainData() {\r\n//                 const web3 = window.web3;\r\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//                 console.log(\"here is my account\"+account);\r\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\r\n//                // to get the networkId\r\n//                 console.log(`network id is ${networkId}`);\r\n        \r\n//                 //load Voting  contract to your app\r\n             \r\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n//                 // console.log(votingData.address);\r\n//                 if(votingData) {\r\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\r\n                    \r\n//                     //  console.log(votingData.address);\r\n//                     this.setState({voting: voting});\r\n//                     let counter = await voting.methods.counter().call();\r\n//                     this.setState({counter: counter.toString() })\r\n//                     console.log({counter: counter})\r\n//                     // let person = await voting.methods.person.call();\r\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\r\n                    \r\n                    \r\n//                 }\r\n//                 else{\r\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\r\n//                 }\r\n\r\n\r\n//                 this.setState({loading: false});\r\n//              }\r\n      \r\n         \r\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//         constructor(props) {\r\n//                 super(props);\r\n//                 this.state = {\r\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//                    voting: {},//creating empty objects for storing the object\r\n//                    counter:'0',\r\n//                    person: 'false',\r\n//                    loading: true\r\n//                 }\r\n//             }\r\n        \r\n//             render() {\r\n                \r\n//              let content;\r\n                \r\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\r\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\r\n//                 <p><button  >count:  </button></p>\r\n//                 <p> {this.props.counter}</p>\r\n//                 <p>\r\n//                 <button>{this.props.person} person</button>\r\n//                 </p>\r\n                \r\n\r\n//             </div>}\r\n//             return (\r\n//                 <>\r\n//                 <div className='container-fluid mt-6'> \r\n//                 <div className='row'>\r\n//                     {content}\r\n//                      </div>\r\n//                 </div>\r\n//                     </>  \r\n//             )\r\n//             }\r\n//         }\r\n        \r\n//         export default App;\r\n        \r\n// import Voting from \"../truffle_abis/voting.json\"\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Web3 from \"web3\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   const [contract, setContract] = useState(null);\r\n//   const [person, setPerson] = useState(false);\r\n//   const [counter, setCounter] = useState(0);\r\n\r\n//   // Load the contract on component mount\r\n//   useEffect(() => {\r\n//     const loadTheApp = async () => {\r\n//       // Connect to Ethereum network\r\n//       if (window.ethereum) {\r\n//         await window.ethereum.enable();\r\n//         const web3 = new Web3(window.ethereum);\r\n\r\n//         // Load the network\r\n//         const networkId = await web3.eth.net.getId();\r\n//         const contractAddress=  Voting.networks[networkId].address;\r\n//         const contractABI = Voting.abi;\r\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//         setContract(votingContract);\r\n//       }\r\n//     };\r\n\r\n//     loadTheApp();\r\n//   }, []);\r\n\r\n//   // Handle the voting button click\r\n//   const handleVoteClick = async () => {\r\n//     try {\r\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress });\r\n\r\n//       // Update the state\r\n//       const newCounter = await contract.methods.counter().call();\r\n//       setCounter(parseInt(newCounter));\r\n\r\n//       if (newCounter === \"10\") {\r\n//         setPerson(true);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Smart Contract Voting</h1>\r\n//       <p>Counter: {counter}</p>\r\n//       {person ? (\r\n//         <p>The person has voted 10 times.</p>\r\n//       ) : (\r\n//         <button onClick={handleVoteClick}>Vote</button>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n//      const contractAddress=  Voting.networks[5777].address;\r\n// const contractABI = Voting.abi;\r\n         \r\n\r\n// try 14-04-23\r\n\r\n// import React, {Component, useState} from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './App.css'\r\n// import Web3 from 'web3';                                                                                                                                                       \r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// export default function App() {\r\n//         var votingContract;\r\n//         var userAccount;\r\n       \r\n//         var [votingContract, setVotingContract] = useState(undefined);\r\n//         var [account, setAccount] = useState(undefined);\r\n//         var [counting, setCounting] = useState(0);\r\n//         var [reaction, setReaction] = useState(undefined);\r\n//         var [person, setPersonStatus] = useState(undefined);\r\n\r\n\r\n\r\n\r\n//         async function startApp(){\r\n//                     if(window.ethereum){\r\n//                        window.web3 = new Web3(window.ethereum);\r\n//                        await window.ethereum.enable();     \r\n//                     } else if(window.web3) {\r\n//                          window.web3 = new Web3(window.web3.currentProvider)\r\n//                     }else {\r\n//                         console.log(\"No ethereum browser detected: You can check out MetaMask\")\r\n//                     }                \r\n//                 }\r\n//                 async function loadingBlockchainData() {\r\n//                     await startApp();\r\n//                     const web3= window.web3;\r\n//                     userAccount = await web3.eth.getAccounts();// this is to get the connected account on the browser from the MetaMask\r\n//                     setAccount(userAccount);\r\n//                    const networkId = await web3.eth.net.getId();\r\n//                    const votingData = Voting.networks[networkId];\r\n                   \r\n//                    //now loading our smart conntract\r\n//                    if(votingData){\r\n//                        var contractAddress= votingData.address;\r\n\r\n//                        var voting = new web3.eth.Contract( Voting.abi, contractAddress );\r\n//                        setVotingContract(voting);\r\n//                    }\r\n//                    else{\r\n//                     console.log(\"your votingData is not loaded yet!!\")\r\n//                    }\r\n//                 }\r\n//                 // var permission\r\n//                 // async function permToVote() {\r\n//                 //     permission= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n//                 //     .on('receipt', function (reciept){\r\n//                 //             setReaction(`user have successfully voted`);\r\n//                 //     }).on('error', function(error) {\r\n//                 //         setReaction(`user vote isn't updated by the following error=> ${error}`)\r\n//                 //     })\r\n//                 // } \r\n\r\n//                        var counted;\r\n//                 async function counter() {\r\n//                     counted= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n//                     .on('receipt', function (reciept){\r\n//                             setReaction(`user have successfully voted`);\r\n//                     }).on('error', function(error) {\r\n//                         setReaction(`user vote isn't updated by the following error=> ${error}`)\r\n//                     })\r\n//                 } \r\n//                 var counting;\r\n//                async function countingStatus() {\r\n//                 counting= await votingContract.methods.counter().call();\r\n//                 setCounting(counting);\r\n//                }\r\n                 \r\n//                var personn;\r\n//                async function personStatus() {\r\n//                 personn = await votingContract.methods.n().call();\r\n//                 setPersonStatus(personn)\r\n//                }\r\n    \r\n//         return(\r\n//             <div id='container'>\r\n//             <h1>hello world</h1>\r\n//             <h2>now get the right to vote by clicking the button below</h2>\r\n//             <button onClick={loadingBlockchainData()}>vote</button>\r\n//             <h2>counter</h2>\r\n//             <button onClick={counter()}>counter</button>\r\n//             <p id='txtStatus'> {reaction}</p>\r\n//             <button onClick={countingStatus()}>Counting status</button>\r\n//             <p id='countingStatusOnSite'> {counting}</p>\r\n//             <button onClick={personStatus()}>person status</button>\r\n//             <p id='personStatusOnSite'> {person}</p>\r\n//             </div>\r\n//         )\r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n// import Voting from \"../truffle_abis/voting.json\"\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Web3 from \"web3\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//     const [address, setAddress] = useState('0x0');\r\n//   const [contract, setContract] = useState(null);\r\n//   const [person, setPerson] = useState(false);\r\n//   const [counter, setCounter] = useState(0);\r\n\r\n//   // Load the contract on component mount\r\n//   useEffect(() => {\r\n//     const loadTheApp = async () => {\r\n//       // Connect to Ethereum network\r\n//       if (window.ethereum) {\r\n//         await window.ethereum.enable();\r\n//         const web3 = new Web3(window.ethereum);\r\n\r\n//         // Load the network\r\n//         const networkId = await web3.eth.net.getId();\r\n//         console.log(`the networkId is => ${networkId}`)\r\n//         const contractAddress=  Voting.networks[networkId].address;\r\n//         setAddress(contractAddress);\r\n//         const contractABI = Voting.abi;\r\n//         const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//         setContract(votingContract);\r\n        \r\n//       }\r\n//     };  \r\n\r\n//     loadTheApp();\r\n//   }, []);\r\n  \r\n\r\n//   // Handle the voting button click\r\n//   const handleVoteClick = async () => {\r\n//     try {\r\n//       await contract.methods.Vote().send({ from: window.ethereum.selectedAddress, gas: 3000000 });\r\n\r\n//       // Update the state\r\n//       const newCounter = await contract.methods.counter().call();\r\n//       setCounter(parseInt(newCounter));\r\n//     //   console.log(`counter is => `+counter)\r\n\r\n//       if (newCounter === \"13\") {\r\n//         setPerson(true);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n\r\n\r\n//     <div className=\"App\">\r\n//       <h1>Smart Contract Voting</h1>\r\n//       <p>Counter: {counter}</p>\r\n//       {person ? (\r\n//         <p>The person has voted 10 times.</p>\r\n//       ) : (\r\n//         <button onClick={handleVoteClick}>Vote</button>\r\n//       )}\r\n//     </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n/// improved voting \r\n\r\nimport Voting from \"../truffle_abis/voting.json\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\n//start: 15:03\r\nfunction App() {\r\n\r\n  const [contract, setContract] = useState(null);\r\n  const [countA, setCountA] = useState('0');\r\n  const [countB, setCountB] = useState('0');\r\n  const [countC, setCountC] = useState('0');\r\n  const [result, setResult] = useState('result will be declared soon');\r\n  const [account, setAccount] = useState('account will be updated soon');\r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n        const loadTheApp = async () => {\r\n          // Connect to Ethereum network\r\n          if (window.ethereum) {\r\n            await window.ethereum.enable();\r\n            const web3 = new Web3(window.ethereum);\r\n\r\n            ///getting the account\r\n             \r\n        const account = await web3.eth.getAccounts();\r\n        setAccount(account[0]);\r\n            // Load the network\r\n            const networkId = await web3.eth.net.getId();\r\n            const contractAddress=  Voting.networks[networkId].address.toString();// fetching the system from thi abis\r\n            console.log(typeof contractAddress);\r\n            console.log(web3.eth.accounts[0]);\r\n            console.log(contractAddress)\r\n            const contractABI = Voting.abi;\r\n            console.log(`contractAbi is= `+contractABI)\r\n            const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n            \r\n            setContract(votingContract);\r\n            \r\n          }\r\n        };  \r\n        \r\n        \r\n        loadTheApp();\r\n      }, []);\r\n      console.log(`contract is => ${contract}`)\r\n      \r\n          let votea;\r\n        \r\n          async function votingOfA() {\r\n            if(contract !== null) {\r\n              votea= await contract.methods.voteA().send({from: account})\r\n              .on(\"receipt\", function(receipt) {\r\n              \r\n                let voteStatusForA = document.getElementById('voteStatusForA');\r\n                voteStatusForA.innerHTML= `voting for part A has been done`;\r\n\r\n                statusOfA();\r\n              })\r\n              .on(\"error\", function(error) {\r\n                \r\n                let voteStatusForA = document.getElementById('voteStatusForA');\r\n                voteStatusForA.innerHTML= `Something went wrong while voting`;\r\n              })\r\n            }\r\n            else{\r\n              setTimeout(()=>{\r\n                votingOfA();\r\n              },100)\r\n            }\r\n          }\r\n          let voteb;\r\n        \r\n          async function votingOfB() {\r\n            if(contract!==null){\r\n              voteb= await contract.methods.voteB().send({from: account})\r\n              .on(\"receipt\", function(receipt) {\r\n                \r\n                let voteStatusForB = document.getElementById('voteStatusForB');\r\n                voteStatusForB.innerHTML=`voting for part B has been done`;\r\n\r\n                statusOfB();\r\n              })\r\n              .on(\"error\", function(error) {\r\n                  let voteStatusForB = document.getElementById('voteStatusForB');\r\n                voteStatusForB.innerHTML= `Something went wrong while voting`;\r\n              })\r\n            }\r\n            else{\r\n              setTimeout(()=>{\r\n                votingOfB();\r\n              },100)\r\n            }\r\n          }\r\n          let votec;\r\n         \r\n          async function votingOfC() {\r\n            if(contract !== null){\r\n              votec= await contract.methods.voteB().send({from: account})\r\n              .on(\"receipt\", function(receipt) {\r\n                let voteStatusForC = document.getElementById('voteStatusForC');\r\n                voteStatusForC.innerHTML = `voting for part C has been done`;\r\n\r\n                statusOfC();\r\n              })\r\n              .on(\"error\", function(error) {\r\n                  console.log(`error from voting of c = ${error}`)\r\n                let voteStatusForC = document.getElementById('voteStatusForC');\r\n                voteStatusForC.innerHTML=  `Something went wrong while voting`;;\r\n              })\r\n            }\r\n            else{\r\n              setTimeout(()=>{\r\n                votingOfC();\r\n              },100)\r\n            }\r\n          }\r\n\r\n          \r\n          useEffect(()=>{\r\n            console.log(result);\r\n            let resultsOfVoting = document.getElementById('resultsOfVoting');\r\n                resultsOfVoting.innerHTML = result;\r\n    \r\n  },[result]);\r\n            let r;\r\n          async function resultDeclaration() {\r\n            r= await contract.methods.winner().call();\r\n              setResult(r);\r\n          }\r\n\r\n          async function endOfVoting() {\r\n           \r\n            let buttonForA = document.getElementById('buttonForA');\r\n            buttonForA.setAttribute(\"disabled\", true);\r\n            let buttonForB = document.getElementById('buttonForB');\r\n            buttonForB.setAttribute(\"disabled\", true);\r\n            let buttonForC = document.getElementById('buttonForC');\r\n            buttonForC.setAttribute(\"disabled\", true);\r\n          }\r\n\r\n          useEffect(()=>{\r\n            console.log(countA);\r\n            let statusForA = document.getElementById('statusForA');\r\n            statusForA.innerHTML = countA;\r\n          },[countA])\r\n            let vak;\r\n          async function statusOfA() {\r\n              vak = await contract.methods.a().call();\r\n              console.log('a is called'+vak);\r\n              console.log(`type of vak = ${typeof vak}`)\r\n              setCountA(vak.toString());\r\n          }\r\n\r\n\r\n          useEffect(()=>{\r\n            console.log(countB);\r\n            let statusForB = document.getElementById('statusForB');\r\n            statusForB.innerHTML = countB;\r\n          },[countB])\r\n            let ky;\r\n          async function statusOfB() {\r\n              ky = await contract.methods.b().call();\r\n              console.log('b is called'+vak);\r\n              console.log(`type of ky = ${typeof ky}`)\r\n              setCountB(ky.toString());\r\n          }\r\n\r\n\r\n          useEffect(()=>{\r\n            console.log(countC);\r\n            let statusForC = document.getElementById('statusForC');\r\n            statusForC.innerHTML = countB;\r\n          },[countC])\r\n            let koi;\r\n          async function statusOfB() {\r\n              koi = await contract.methods.c().call();\r\n              console.log('b is called'+vak);\r\n              console.log(`type of ky = ${typeof ky}`)\r\n              setCountB(ky.toString());\r\n          }\r\n          \r\n          \r\n\r\n\r\n  return(\r\n      <>\r\n      <div id=\"heading\">creating an improved version of the voting in India</div>\r\n      \r\n\r\n      <div id=\"voteContainer\">\r\n        <div className=\"votingBallot\">\r\n        <h2 id=\"votingSectionOfA\">A</h2>\r\n        <p id=\"statusForA\"></p>\r\n\r\n        <button disabled={!contract}  id=\"buttonForA\" className=\"votingButtons\" onClick={()=> {\r\n          votingOfA(); \r\n          }}>Vote</button>\r\n\r\n        <p id=\"voteStatusForA\"></p>\r\n        </div>\r\n        <div className=\"votingBallot\">\r\n        <h2 id=\"votingSectionOfB\">B</h2>\r\n        <p id=\"statusForB\" ></p>\r\n        <button disabled={!contract} id=\"buttonForB\" className=\"votingButtons\" onClick={()=> {\r\n          votingOfB();\r\n\r\n          }}>Vote</button>\r\n       <p id=\"voteStatusForB\"></p>\r\n        </div>\r\n        <div className=\"votingBallot\">\r\n        <h2 id=\"votingSectionOfC\">C</h2>\r\n        <p id=\"statusForC\" ></p>\r\n        <button disabled={!contract} id=\"buttonForC\"  className=\"votingButtons\" onClick={()=> {votingOfC();}}>Vote</button>\r\n        <p id=\"voteStatusForC\"></p>\r\n        </div>\r\n      </div>  \r\n\r\n      <div id=\"endVoting\"> <button onClick={()=>{ endOfVoting();}}>End Voting</button></div>\r\n      <div id=\"results\"><button onClick={()=>{ resultDeclaration(); }}>Show Results</button></div>\r\n      <div id=\"boxContainingResult\"><p id=\"resultsOfVoting\"></p></div>\r\n      </>\r\n\r\n  )\r\n  }\r\n  export default App;\r\n  // problem\r\n\r\n  //1. why I the innerHTML is not working \r\n  //2. and findout the new error of metaMask"]},"metadata":{},"sourceType":"module"}