{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     async  loadWeb3() {\n//     if(window.ethereum) {\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//         await window.ethereum.enable()\n//     } else if(window.web3) {\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//     }else {\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//     }\n// }\n// // loading web3 in our react-app\n//     async  loadBlockchainData() {\n//         const web3 = window.web3;\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//         console.log(\"here is my account\"+account);\n//         const networkId = await web3.eth.net.getId();// to get the networkId\n//         //load randomContractName  contract to your app\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//     }\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//           //  tether: {},//creating empty objects for storing the object\n//         }\n//     }\n//     render() {\n//     return (\n//         <>\n//         <h1 className='text-center'>Jai mata di</h1>\n//             </>  \n//     )\n//     }\n// }\n// export default App;\n//testing part---\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport Voting from '../truffle_abis/voting.json'; // here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum); // to check whether the browser has any account on the ethereum or not\n\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider); // The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n                } else {\n                  window.alert(\"No ethereum browser detected: You can check out MetaMask\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // loading web3 in our react-app\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, votingData, counter;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                // this just for fetching my account that I am using currently in the browser\n                this.setState({\n                  account: account[0]\n                }); // here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n\n                console.log(\"here is my account\" + account);\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                // to get the networkId\n                console.log(\"network id is \".concat(networkId)); //load Voting  contract to your app\n\n                co;\n                votingData = Voting.networks[networkId]; //but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n\n                if (!votingData) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                voting = new web3.eth.Contract(Voting.abi, votingData.address);\n                this.setState({\n                  voting: voting\n                });\n                _context3.next = 17;\n                return voting.methods.counter.call();\n\n              case 17:\n                counter = _context3.sent;\n                this.setState({\n                  counter: counter.toString()\n                }); // let person = await voting.methods.person.call();\n                // this.setState({person: person})// problem that wether it willl be converted to string or not\n\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 23;\n                break;\n\n              case 22:\n                console.log(\"Error while loading the contract or either networkId has some Issues\");\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n  // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.Vote = function () {\n      voting.methods.counter.call();\n    };\n\n    _this.state = {\n      account: '0x0',\n      // enertring random value for precerving the int type vacant variable to later use in mhy project \n      voting: {},\n      //creating empty objects for storing the object\n      counter: '0',\n      person: {},\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 48\n          }\n        }, \"Loading Please Wait....\") : content = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 151\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 16\n          }\n        }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n          style: {\n            margin: '2rem'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 20\n          }\n        }, \" Vote\")), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: Vote,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 20\n          }\n        }, \"count: \")), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }\n        }, \" \", this.props.counter), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }\n        }, this.props.person, \" person\")));\n      }\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }, content)));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","useState","Web3","Voting","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","console","log","net","getId","networkId","co","votingData","networks","voting","Contract","abi","address","methods","counter","call","toString","loading","props","Vote","state","person","content","margin"],"mappings":"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","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\nimport React, {Component, useState} from 'react';\r\nimport './App.css'\r\nimport Web3 from 'web3';\r\nimport Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\nclass App extends Component {\r\n\r\n\r\n\r\n    async  UNSAFE_componentWillMount() {\r\n                await this.loadWeb3();\r\n                await this.loadBlockchainData();\r\n            }\r\n        \r\n            async  loadWeb3() {\r\n            if(window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n                await window.ethereum.enable()\r\n            } else if(window.web3) {\r\n                window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n            }else {\r\n                window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n            }\r\n        }\r\n        // loading web3 in our react-app\r\n            async  loadBlockchainData() {\r\n                const web3 = window.web3;\r\n                const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n                this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n                console.log(\"here is my account\"+account);\r\n                const networkId = await web3.eth.net.getId();// to get the networkId\r\n                console.log(`network id is ${networkId}`)\r\n        \r\n                //load Voting  contract to your app\r\n                co;\r\n                const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n                if(votingData) {\r\n                     voting= new web3.eth.Contract( Voting.abi, votingData.address )\r\n                    this.setState({voting});\r\n                    let counter = await voting.methods.counter.call();\r\n                    this.setState({counter: counter.toString() })\r\n                    // let person = await voting.methods.person.call();\r\n                    // this.setState({person: person})// problem that wether it willl be converted to string or not\r\n                    this.setState({loading: false})\r\n\r\n                }\r\n                else{\r\n                    console.log(`Error while loading the contract or either networkId has some Issues`)\r\n                }\r\n           \r\n            }\r\n\r\n         Vote=()=> {\r\n                voting.methods.counter.call();\r\n            }\r\n        //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n        // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {\r\n                    account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n                   voting: {},//creating empty objects for storing the object\r\n                   counter:'0',\r\n                   person: {},\r\n                   loading: true\r\n                }\r\n            }\r\n        \r\n            render() {\r\n                let content;\r\n                \r\n                {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\r\n               <p> <button style={{margin:'2rem',}}> Vote</button></p>\r\n                <p><button onClick={Vote}>count: </button></p>\r\n                <p> {this.props.counter}</p>\r\n                <p>\r\n                <button>{this.props.person} person</button>\r\n                </p>\r\n                \r\n\r\n            </div>}\r\n            return (\r\n                <>\r\n                <div className='container-fluid mt-6'> \r\n                <div className='row'>\r\n                    {content}\r\n                     </div>\r\n                </div>\r\n                    </>  \r\n            )\r\n            }\r\n        }\r\n        \r\n        export default App;\r\n        \r\n"]},"metadata":{},"sourceType":"module"}