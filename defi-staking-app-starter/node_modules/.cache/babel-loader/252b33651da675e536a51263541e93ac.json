{"ast":null,"code":"// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     async  loadWeb3() {\n//     if(window.ethereum) {\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//         await window.ethereum.enable()\n//     } else if(window.web3) {\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//     }else {\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//     }\n// }\n// // loading web3 in our react-app\n//     async  loadBlockchainData() {\n//         const web3 = window.web3;\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//         console.log(\"here is my account\"+account);\n//         const networkId = await web3.eth.net.getId();// to get the networkId\n//         //load randomContractName  contract to your app\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//     }\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//           //  tether: {},//creating empty objects for storing the object\n//         }\n//     }\n//     render() {\n//     return (\n//         <>\n//         <h1 className='text-center'>Jai mata di</h1>\n//             </>  \n//     )\n//     }\n// }\n// export default App;\n//testing part---\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//                 await this.loadWeb3();\n//                 await this.loadBlockchainData();\n//             }\n//             async  loadWeb3() {\n//             if(window.ethereum) {\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//                 await window.ethereum.enable()\n//             } else if(window.web3) {\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//             }else {\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//             }\n//         }\n//         // loading web3 in our react-app\n//             async  loadBlockchainData() {\n//                 const web3 = window.web3;\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//                 console.log(\"here is my account\"+account);\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\n//                // to get the networkId\n//                 console.log(`network id is ${networkId}`);\n//                 //load Voting  contract to your app\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//                 // console.log(votingData.address);\n//                 if(votingData) {\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\n//                     //  console.log(votingData.address);\n//                     this.setState({voting: voting});\n//                     let counter = await voting.methods.counter().call();\n//                     this.setState({counter: counter.toString() })\n//                     console.log({counter: counter})\n//                     // let person = await voting.methods.person.call();\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\n//                 }\n//                 else{\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\n//                 }\n//                 this.setState({loading: false});\n//              }\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//         constructor(props) {\n//                 super(props);\n//                 this.state = {\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//                    voting: {},//creating empty objects for storing the object\n//                    counter:'0',\n//                    person: 'false',\n//                    loading: true\n//                 }\n//             }\n//             render() {\n//              let content;\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\n//                 <p><button  >count:  </button></p>\n//                 <p> {this.props.counter}</p>\n//                 <p>\n//                 <button>{this.props.person} person</button>\n//                 </p>\n//             </div>}\n//             return (\n//                 <>\n//                 <div className='container-fluid mt-6'> \n//                 <div className='row'>\n//                     {content}\n//                      </div>\n//                 </div>\n//                     </>  \n//             )\n//             }\n//         }\n//         export default App;","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\n// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//                 await this.loadWeb3();\r\n//                 await this.loadBlockchainData();\r\n//             }\r\n        \r\n//             async  loadWeb3() {\r\n//             if(window.ethereum) {\r\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//                 await window.ethereum.enable()\r\n//             } else if(window.web3) {\r\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//             }else {\r\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//             }\r\n//         }\r\n//         // loading web3 in our react-app\r\n        \r\n//             async  loadBlockchainData() {\r\n//                 const web3 = window.web3;\r\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//                 console.log(\"here is my account\"+account);\r\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\r\n//                // to get the networkId\r\n//                 console.log(`network id is ${networkId}`);\r\n        \r\n//                 //load Voting  contract to your app\r\n             \r\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n//                 // console.log(votingData.address);\r\n//                 if(votingData) {\r\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\r\n                    \r\n//                     //  console.log(votingData.address);\r\n//                     this.setState({voting: voting});\r\n//                     let counter = await voting.methods.counter().call();\r\n//                     this.setState({counter: counter.toString() })\r\n//                     console.log({counter: counter})\r\n//                     // let person = await voting.methods.person.call();\r\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\r\n                    \r\n                    \r\n//                 }\r\n//                 else{\r\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\r\n//                 }\r\n\r\n\r\n//                 this.setState({loading: false});\r\n//              }\r\n      \r\n         \r\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//         constructor(props) {\r\n//                 super(props);\r\n//                 this.state = {\r\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//                    voting: {},//creating empty objects for storing the object\r\n//                    counter:'0',\r\n//                    person: 'false',\r\n//                    loading: true\r\n//                 }\r\n//             }\r\n        \r\n//             render() {\r\n                \r\n//              let content;\r\n                \r\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\r\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\r\n//                 <p><button  >count:  </button></p>\r\n//                 <p> {this.props.counter}</p>\r\n//                 <p>\r\n//                 <button>{this.props.person} person</button>\r\n//                 </p>\r\n                \r\n\r\n//             </div>}\r\n//             return (\r\n//                 <>\r\n//                 <div className='container-fluid mt-6'> \r\n//                 <div className='row'>\r\n//                     {content}\r\n//                      </div>\r\n//                 </div>\r\n//                     </>  \r\n//             )\r\n//             }\r\n//         }\r\n        \r\n//         export default App;\r\n        "]},"metadata":{},"sourceType":"module"}