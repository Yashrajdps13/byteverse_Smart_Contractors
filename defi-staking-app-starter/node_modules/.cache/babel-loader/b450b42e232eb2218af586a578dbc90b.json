{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     async  loadWeb3() {\n//     if(window.ethereum) {\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//         await window.ethereum.enable()\n//     } else if(window.web3) {\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//     }else {\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//     }\n// }\n// // loading web3 in our react-app\n//     async  loadBlockchainData() {\n//         const web3 = window.web3;\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//         console.log(\"here is my account\"+account);\n//         const networkId = await web3.eth.net.getId();// to get the networkId\n//         //load randomContractName  contract to your app\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//     }\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//           //  tether: {},//creating empty objects for storing the object\n//         }\n//     }\n//     render() {\n//     return (\n//         <>\n//         <h1 className='text-center'>Jai mata di</h1>\n//             </>  \n//     )\n//     }\n// }\n// export default App;\n//testing part---\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport Voting from '../truffle_abis/voting.json'; // here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum); // to check whether the browser has any account on the ethereum or not\n\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider); // The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n                } else {\n                  window.alert(\"No ethereum browser detected: You can check out MetaMask\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // loading web3 in our react-app\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                // this just for fetching my account that I am using currently in the browser\n                this.setState({\n                  account: account[0]\n                }); // here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n\n                console.log(\"here is my account\" + account);\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n    // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0' // enertring random value for precerving the int type vacant variable to later use in mhy project \n      //  tether: {},//creating empty objects for storing the object\n\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }, \"Jai mata di\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","useState","Web3","Voting","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","console","log","net","getId","networkId","props","state"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB,C,CAAgD;;IAI1CC,G;;;;;;;;;;;;uBAIgB,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;qBAIPC,MAAM,CAACC,Q;;;;;AACND,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd,C,CAAuC;;;uBACjCD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AACH,oBAAGH,MAAM,CAACE,IAAV,EAAgB;AACnBF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd,CADmB,CACgC;AACtD,iBAFM,MAED;AACFJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,0DAAb;AACH;;;;;;;;;;;;;;;QAEL;;;;;;;;;;;AAEcH,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACEA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAhBC,gBAAAA,O;AAAuC;AAC7C,qBAAKC,QAAL,CAAc;AAACD,kBAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AAAjB,iBAAd,E,CAAoC;;AACpCE,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAqBH,OAAjC;;uBACwBN,IAAI,CAACI,GAAL,CAASM,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;;;;;;;;;;;;;;;QAMd;AAEA;;;;AACI,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTR,MAAAA,OAAO,EAAE,KADA,CACM;AACjB;;AAFW,KAAb;AAFe;AAMlB;;;;6BAEQ;AACT,0BACI,uDACA;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,CADJ;AAMC;;;;EAhDKf,S;;AAmDV,eAAeI,GAAf","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\nimport React, {Component, useState} from 'react';\r\nimport './App.css'\r\nimport Web3 from 'web3';\r\nimport Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n    async  UNSAFE_componentWillMount() {\r\n                await this.loadWeb3();\r\n                await this.loadBlockchainData();\r\n            }\r\n        \r\n            async  loadWeb3() {\r\n            if(window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n                await window.ethereum.enable()\r\n            } else if(window.web3) {\r\n                window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n            }else {\r\n                window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n            }\r\n        }\r\n        // loading web3 in our react-app\r\n            async  loadBlockchainData() {\r\n                const web3 = window.web3;\r\n                const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n                this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n                console.log(\"here is my account\"+account);\r\n                const networkId = await web3.eth.net.getId();// to get the networkId\r\n        \r\n                //load Voting  contract to your app\r\n                //const votingData = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n             \r\n            }\r\n        //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n        // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                    account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n                  //  tether: {},//creating empty objects for storing the object\r\n                }\r\n            }\r\n        \r\n            render() {\r\n            return (\r\n                <>\r\n                <h1 className='text-center'>Jai mata di</h1>\r\n                   \r\n                    </>  \r\n            )\r\n            }\r\n        }\r\n        \r\n        export default App;\r\n        \r\n"]},"metadata":{},"sourceType":"module"}