{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//         await this.loadWeb3();\n//         await this.loadBlockchainData();\n//     }\n//     async  loadWeb3() {\n//     if(window.ethereum) {\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//         await window.ethereum.enable()\n//     } else if(window.web3) {\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//     }else {\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//     }\n// }\n// // loading web3 in our react-app\n//     async  loadBlockchainData() {\n//         const web3 = window.web3;\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//         console.log(\"here is my account\"+account);\n//         const networkId = await web3.eth.net.getId();// to get the networkId\n//         //load randomContractName  contract to your app\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//     }\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//           //  tether: {},//creating empty objects for storing the object\n//         }\n//     }\n//     render() {\n//     return (\n//         <>\n//         <h1 className='text-center'>Jai mata di</h1>\n//             </>  \n//     )\n//     }\n// }\n// export default App;\n//testing part---\n// import React, {Component, useState} from 'react';\n// import './App.css'\n// import Web3 from 'web3';\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n// class App extends Component {\n//     async  UNSAFE_componentWillMount() {\n//                 await this.loadWeb3();\n//                 await this.loadBlockchainData();\n//             }\n//             async  loadWeb3() {\n//             if(window.ethereum) {\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\n//                 await window.ethereum.enable()\n//             } else if(window.web3) {\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\n//             }else {\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\n//             }\n//         }\n//         // loading web3 in our react-app\n//             async  loadBlockchainData() {\n//                 const web3 = window.web3;\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\n//                 console.log(\"here is my account\"+account);\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\n//                // to get the networkId\n//                 console.log(`network id is ${networkId}`);\n//                 //load Voting  contract to your app\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\n//                 // console.log(votingData.address);\n//                 if(votingData) {\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\n//                     //  console.log(votingData.address);\n//                     this.setState({voting: voting});\n//                     let counter = await voting.methods.counter().call();\n//                     this.setState({counter: counter.toString() })\n//                     console.log({counter: counter})\n//                     // let person = await voting.methods.person.call();\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\n//                 }\n//                 else{\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\n//                 }\n//                 this.setState({loading: false});\n//              }\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\n//         constructor(props) {\n//                 super(props);\n//                 this.state = {\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \n//                    voting: {},//creating empty objects for storing the object\n//                    counter:'0',\n//                    person: 'false',\n//                    loading: true\n//                 }\n//             }\n//             render() {\n//              let content;\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\n//                 <p><button  >count:  </button></p>\n//                 <p> {this.props.counter}</p>\n//                 <p>\n//                 <button>{this.props.person} person</button>\n//                 </p>\n//             </div>}\n//             return (\n//                 <>\n//                 <div className='container-fluid mt-6'> \n//                 <div className='row'>\n//                     {content}\n//                      </div>\n//                 </div>\n//                     </>  \n//             )\n//             }\n//         }\n//         export default App;\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport Voting from \"../truffle_abis/voting.json\";\n\nfunction App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      contract = _useState2[0],\n      setContract = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      person = _useState4[0],\n      setPerson = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      counter = _useState6[0],\n      setCounter = _useState6[1]; // Load the contract on component mount\n\n\n  useEffect(function () {\n    var init = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, votingContract;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return window.ethereum.enable();\n\n              case 3:\n                web3 = new Web3(window.ethereum); // Load the contract\n\n                votingContract = new web3.eth.Contract(contractABI, contractAddress);\n                setContract(votingContract);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function init() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    init();\n  }, []); // Handle the voting button click\n\n  var handleVoteClick = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var newCounter;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return contract.methods.Vote().send({\n                from: window.ethereum.selectedAddress\n              });\n\n            case 3:\n              _context2.next = 5;\n              return contract.methods.counter().call();\n\n            case 5:\n              newCounter = _context2.sent;\n              setCounter(parseInt(newCounter, 10));\n\n              if (newCounter === 10) {\n                setPerson(true);\n              }\n\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n\n    return function handleVoteClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, \"Smart Contract Voting\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, \"Counter: \", counter), person ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, \"The person has voted 10 times.\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleVoteClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, \"Vote\"));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":["React","useState","useEffect","Web3","Voting","App","contract","setContract","person","setPerson","counter","setCounter","init","window","ethereum","enable","web3","votingContract","eth","Contract","contractABI","contractAddress","handleVoteClick","methods","Vote","send","from","selectedAddress","call","newCounter","parseInt","console","error"],"mappings":"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","sourcesContent":["// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// //import Tether from '../truffle_abis/Tether.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//         await this.loadWeb3();\r\n//         await this.loadBlockchainData();\r\n//     }\r\n\r\n//     async  loadWeb3() {\r\n//     if(window.ethereum) {\r\n//         window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//         await window.ethereum.enable()\r\n//     } else if(window.web3) {\r\n//         window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//     }else {\r\n//         window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//     }\r\n// }\r\n// // loading web3 in our react-app\r\n//     async  loadBlockchainData() {\r\n//         const web3 = window.web3;\r\n//         const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//         this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//         console.log(\"here is my account\"+account);\r\n//         const networkId = await web3.eth.net.getId();// to get the networkId\r\n\r\n//         //load randomContractName  contract to your app\r\n//         //const tetherdata = Tether.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n     \r\n//     }\r\n// //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n\r\n// // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//           //  tether: {},//creating empty objects for storing the object\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//     return (\r\n//         <>\r\n//         <h1 className='text-center'>Jai mata di</h1>\r\n           \r\n//             </>  \r\n//     )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n//testing part---\r\n// import React, {Component, useState} from 'react';\r\n// import './App.css'\r\n// import Web3 from 'web3';\r\n// import Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\n// class App extends Component {\r\n\r\n\r\n\r\n//     async  UNSAFE_componentWillMount() {\r\n//                 await this.loadWeb3();\r\n//                 await this.loadBlockchainData();\r\n//             }\r\n        \r\n//             async  loadWeb3() {\r\n//             if(window.ethereum) {\r\n//                 window.web3 = new Web3(window.ethereum)// to check whether the browser has any account on the ethereum or not\r\n//                 await window.ethereum.enable()\r\n//             } else if(window.web3) {\r\n//                 window.web3 = new Web3(window.web3.currentProvider)// The code assigns a new Web3 instance to the window.web3 object, using the current provider object set by a browser extension like Metamask.\r\n//             }else {\r\n//                 window.alert(\"No ethereum browser detected: You can check out MetaMask\")\r\n//             }\r\n//         }\r\n//         // loading web3 in our react-app\r\n        \r\n//             async  loadBlockchainData() {\r\n//                 const web3 = window.web3;\r\n//                 const account = await web3.eth.getAccounts();// this just for fetching my account that I am using currently in the browser\r\n//                 this.setState({account: account[0]})// here we have used setState to initailize the account form the array of account which is created by the \"web3.eth.getAccounts()\"\r\n//                 console.log(\"here is my account\"+account);\r\n//                 const networkId = await web3.eth.net.getId();// to get the networkId\r\n//                // to get the networkId\r\n//                 console.log(`network id is ${networkId}`);\r\n        \r\n//                 //load Voting  contract to your app\r\n             \r\n//                 const votingData = Voting.networks[networkId];//but you can simply check that whether the contract is habing the above mentioned mentioned netwworkId or not? by just opening its JSON file in the \"contract_abis\"\r\n//                 // console.log(votingData.address);\r\n//                 if(votingData) {\r\n//                     const voting = new web3.eth.Contract( Voting.abi, votingData.address )\r\n                    \r\n//                     //  console.log(votingData.address);\r\n//                     this.setState({voting: voting});\r\n//                     let counter = await voting.methods.counter().call();\r\n//                     this.setState({counter: counter.toString() })\r\n//                     console.log({counter: counter})\r\n//                     // let person = await voting.methods.person.call();\r\n//                     // this.setState({person: person})// problem that wether it willl be converted to string or not\r\n                    \r\n                    \r\n//                 }\r\n//                 else{\r\n//                     console.log(`Error while loading the contract or either networkId has some Issues`)\r\n//                 }\r\n\r\n\r\n//                 this.setState({loading: false});\r\n//              }\r\n      \r\n         \r\n//         //The state property is a way for React components to manage their internal state, which determines how they are rendered and updated.\r\n        \r\n//         // In this case, the component is initialized with an initial state of { account: '0x0' }, which means that the account property will initially be set to the string '0x0'. This state can be updated later by calling the setState method, which will trigger a re-render of the component.\r\n//         constructor(props) {\r\n//                 super(props);\r\n//                 this.state = {\r\n//                     account: '0x0',// enertring random value for precerving the int type vacant variable to later use in mhy project \r\n//                    voting: {},//creating empty objects for storing the object\r\n//                    counter:'0',\r\n//                    person: 'false',\r\n//                    loading: true\r\n//                 }\r\n//             }\r\n        \r\n//             render() {\r\n                \r\n//              let content;\r\n                \r\n//                 {this.state.loading ? content= <p id=\"loader\" className='text-center' style={{margin:'30px'}} >Loading Please Wait....</p> : content= <div>\r\n//                <p> <button style={{margin:'2rem',}}> Vote</button></p>\r\n//                 <p><button  >count:  </button></p>\r\n//                 <p> {this.props.counter}</p>\r\n//                 <p>\r\n//                 <button>{this.props.person} person</button>\r\n//                 </p>\r\n                \r\n\r\n//             </div>}\r\n//             return (\r\n//                 <>\r\n//                 <div className='container-fluid mt-6'> \r\n//                 <div className='row'>\r\n//                     {content}\r\n//                      </div>\r\n//                 </div>\r\n//                     </>  \r\n//             )\r\n//             }\r\n//         }\r\n        \r\n//         export default App;\r\n        \r\nimport React, { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\nimport Voting from \"../truffle_abis/voting.json\"\r\n\r\nfunction App() {\r\n\r\nconst [contract, setContract] = useState(null);\r\nconst [person, setPerson] = useState(false);\r\nconst [counter, setCounter] = useState(0);\r\n  // Load the contract on component mount\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      // Connect to Ethereum network\r\n      if (window.ethereum) {\r\n        await window.ethereum.enable();\r\n        const web3 = new Web3(window.ethereum);\r\n\r\n        // Load the contract\r\n      \r\n        const votingContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n        setContract(votingContract);\r\n      }\r\n    };\r\n\r\n    init();\r\n  }, []);\r\n\r\n  // Handle the voting button click\r\n  const handleVoteClick = async () => {\r\n    try {\r\n      await contract.methods.Vote().send({ from: window.ethereum.selectedAddress });\r\n\r\n      // Update the state\r\n      const newCounter = await contract.methods.counter().call();\r\n      setCounter(parseInt(newCounter, 10));\r\n\r\n      if (newCounter === 10) {\r\n        setPerson(true);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Smart Contract Voting</h1>\r\n      <p>Counter: {counter}</p>\r\n      {person ? (\r\n        <p>The person has voted 10 times.</p>\r\n      ) : (\r\n        <button onClick={handleVoteClick}>Vote</button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}