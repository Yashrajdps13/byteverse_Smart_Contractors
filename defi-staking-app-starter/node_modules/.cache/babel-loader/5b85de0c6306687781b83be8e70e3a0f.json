{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\New_Desktop\\\\codeOnDemand\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Web3 from 'web3';\nimport Voting from '../truffle_abis/voting.json'; // here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\n\nexport default function App() {\n  var votingContract;\n  var userAccount;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      counter = _useState2[0],\n      setCounter = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      votingContract = _useState4[0],\n      setVotingContract = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      account = _useState6[0],\n      setAccount = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      counting = _useState8[0],\n      setCounting = _useState8[1];\n\n  function startApp() {\n    return _startApp.apply(this, arguments);\n  }\n\n  function _startApp() {\n    _startApp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                console.log(\"No ethereum browser detected: You can check out MetaMask\");\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _startApp.apply(this, arguments);\n  }\n\n  function loadingBlockchainData() {\n    return _loadingBlockchainData.apply(this, arguments);\n  }\n\n  function _loadingBlockchainData() {\n    _loadingBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var web3, networkId, votingData, contractAddress, voting;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return startApp();\n\n            case 2:\n              web3 = window.web3;\n              _context2.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              userAccount = _context2.sent;\n              // this is to get the connected account on the browser from the MetaMask\n              setAccount(userAccount);\n              _context2.next = 9;\n              return web3.eth.net.getId();\n\n            case 9:\n              networkId = _context2.sent;\n              votingData = Voting.networks[networkId]; //now loading our smart conntract\n\n              if (votingData) {\n                contractAddress = votingData.address;\n                voting = new web3.eth.Contract(Voting.abi, contractAddress);\n                setVotingContract(voting);\n              } else {\n                console.log(\"your votingData is not loaded yet!!\");\n              }\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _loadingBlockchainData.apply(this, arguments);\n  }\n\n  var counting;\n  var counted;\n\n  function counter() {\n    return _counter.apply(this, arguments);\n  }\n\n  function _counter() {\n    _counter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return votingContract.methods.Vote().send({\n                from: userAccount,\n                gas: 3000000\n              });\n\n            case 2:\n              counted = _context3.sent;\n              _context3.next = 5;\n              return votingContract.methods.Vote().call();\n\n            case 5:\n              counting = _context3.sent;\n              setCounting();\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _counter.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"hello world\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"now get the right to vote by clicking the button below\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: loadingBlockchainData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"vote\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"counter\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: counter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"counter\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"txtStatus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \" \"));\n}","map":{"version":3,"sources":["D:/New_Desktop/codeOnDemand/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","useState","ReactDOM","Web3","Voting","App","votingContract","userAccount","counter","setCounter","undefined","setVotingContract","account","setAccount","counting","setCounting","startApp","window","ethereum","web3","enable","currentProvider","console","log","loadingBlockchainData","eth","getAccounts","net","getId","networkId","votingData","networks","contractAddress","address","voting","Contract","abi","counted","methods","Vote","send","from","gas","call"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css'\r\nimport Web3 from 'web3';                                                                                                                                                       \r\nimport Voting from '../truffle_abis/voting.json'// here we just bring up the contract.json which contains all the information about our contract and we call it further to gain access to that data\r\n\r\nexport default function App() {\r\n        var votingContract;\r\n        var userAccount;\r\n        var [counter, setCounter] = useState(0);\r\n        var [votingContract, setVotingContract] = useState(undefined);\r\n        var [account, setAccount] = useState(undefined);\r\n        var [counting, setCounting] = useState(undefined);\r\n\r\n\r\n\r\n        async function startApp(){\r\n                    if(window.ethereum){\r\n                       window.web3 = new Web3(window.ethereum);\r\n                       await window.ethereum.enable();     \r\n                    } else if(window.web3) {\r\n                         window.web3 = new Web3(window.web3.currentProvider)\r\n                    }else {\r\n                        console.log(\"No ethereum browser detected: You can check out MetaMask\")\r\n                    }                \r\n                }\r\n                async function loadingBlockchainData() {\r\n                    await startApp();\r\n                    const web3= window.web3;\r\n                    userAccount = await web3.eth.getAccounts();// this is to get the connected account on the browser from the MetaMask\r\n                    setAccount(userAccount);\r\n                   const networkId = await web3.eth.net.getId();\r\n                   const votingData = Voting.networks[networkId];\r\n                   \r\n                   //now loading our smart conntract\r\n                   if(votingData){\r\n                       var contractAddress= votingData.address;\r\n\r\n                       var voting = new web3.eth.Contract( Voting.abi, contractAddress );\r\n                       setVotingContract(voting);\r\n\r\n                      \r\n                   }\r\n                   else{\r\n                    console.log(\"your votingData is not loaded yet!!\")\r\n                   }\r\n                }\r\n                        var counting;var counted;\r\n                async function counter() {\r\n                    counted= await votingContract.methods.Vote().send({from : userAccount, gas: 3000000})\r\n                    counting= await votingContract.methods.Vote().call();\r\n                      setCounting()\r\n\r\n                }\r\n               \r\n                \r\n    \r\n        return(\r\n            <div id='container'>\r\n            <h1>hello world</h1>\r\n            <h2>now get the right to vote by clicking the button below</h2>\r\n            <button onClick={loadingBlockchainData()}>vote</button>\r\n            <h2>counter</h2>\r\n            <button onClick={counter()}>counter</button>\r\n            <p id='txtStatus'> </p>\r\n              \r\n            </div>\r\n        )\r\n }"]},"metadata":{},"sourceType":"module"}